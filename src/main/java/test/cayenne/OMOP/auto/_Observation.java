package test.cayenne.OMOP.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import test.cayenne.OMOP.Concept;

/**
 * Class _Observation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Observation extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String OBSERVATION_ID_PK_COLUMN = "observation_id";

    public static final Property<Long> OBSERVATION_CONCEPT_ID = Property.create("observationConceptId", Long.class);
    public static final Property<Long> OBSERVATION_ID = Property.create("observationId", Long.class);
    public static final Property<Concept> CONCEPT = Property.create("concept", Concept.class);
    public static final Property<BigDecimal> VALUE_AS_NUMBER = Property.create("valueAsNumber", BigDecimal.class);
    public static final Property<String> VALUE_AS_STRING = Property.create("valueAsString", String.class);



    protected Long observationConceptId;
    protected Long observationId;
    protected BigDecimal valueAsNumber;
    protected String valueAsString;



    protected Object concept;
    
 // pegn add   valueAsString 
    public void setValueAsString(String valueAsString) {
        beforePropertyWrite("valueAsString", this.valueAsString, valueAsString);
        this.valueAsString = valueAsString;
    }

    public String getValueAsString() {
        beforePropertyRead("valueAsString");
        return this.valueAsString;
    }

    public void setObservationConceptId(Long observationConceptId) {
        beforePropertyWrite("observationConceptId", this.observationConceptId, observationConceptId);
        this.observationConceptId = observationConceptId;
    }

    public Long getObservationConceptId() {
        beforePropertyRead("observationConceptId");
        return this.observationConceptId;
    }

    public void setObservationId(Long observationId) {
        beforePropertyWrite("observationId", this.observationId, observationId);
        this.observationId = observationId;
    }

    public Long getObservationId() {
        beforePropertyRead("observationId");
        return this.observationId;
    }

    public void setConcept(Concept concept) {
        setToOneTarget("concept", concept, true);
    }

    public Concept getConcept() {
        return (Concept)readProperty("concept");
    }
    
    public void setValueAsNumber(BigDecimal valueAsNumber) {
        beforePropertyWrite("valueAsNumber", this.valueAsNumber, valueAsNumber);
        this.valueAsNumber = valueAsNumber;
    }

    public BigDecimal getValueAsNumber() {
        beforePropertyRead("valueAsNumber");
        return this.valueAsNumber;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "observationConceptId":
                return this.observationConceptId;
            case "observationId":
                return this.observationId;
            case "valueAsNumber":
                return this.valueAsNumber;  
            case "valueAsString":
                return this.valueAsString;  
            case "concept":
                return this.concept;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "observationConceptId":
                this.observationConceptId = (Long)val;
                break;
            case "observationId":
                this.observationId = (Long)val;
                break;
            case "concept":
                this.concept = val;
                break;
            case "valueAsNumber":
                this.valueAsNumber = (BigDecimal)val;
                break;   
                
            case "valueAsString":
                this.valueAsString = (String)val;
                break;                
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.observationConceptId);
        out.writeObject(this.observationId);
        out.writeObject(this.concept);
        out.writeObject(this.valueAsNumber);
        out.writeObject(this.valueAsString);


    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.observationConceptId = (Long)in.readObject();
        this.observationId = (Long)in.readObject();
        this.concept = in.readObject();
        this.valueAsNumber = (BigDecimal)in.readObject();
        this.valueAsString= (String)in.readObject();

    }

}
