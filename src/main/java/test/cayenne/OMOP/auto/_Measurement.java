package test.cayenne.OMOP.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import test.cayenne.OMOP.Concept;

/**
 * Class _Measurement was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Measurement extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String MEASUREMENT_ID_PK_COLUMN = "measurement_id";

    public static final Property<Long> MEASUREMENT_CONCEPT_ID = Property.create("measurementConceptId", Long.class);
    public static final Property<LocalDate> MEASUREMENT_DATE = Property.create("measurementDate", LocalDate.class);
    public static final Property<LocalDateTime> MEASUREMENT_DATETIME = Property.create("measurementDatetime", LocalDateTime.class);
    public static final Property<Long> MEASUREMENT_ID = Property.create("measurementId", Long.class);
    public static final Property<Integer> MEASUREMENT_SOURCE_CONCEPT_ID = Property.create("measurementSourceConceptId", Integer.class);
    public static final Property<String> MEASUREMENT_SOURCE_VALUE = Property.create("measurementSourceValue", String.class);
    public static final Property<String> MEASUREMENT_TIME = Property.create("measurementTime", String.class);
    public static final Property<Integer> MEASUREMENT_TYPE_CONCEPT_ID = Property.create("measurementTypeConceptId", Integer.class);
    public static final Property<Integer> OPERATOR_CONCEPT_ID = Property.create("operatorConceptId", Integer.class);
    public static final Property<Integer> PERSON_ID = Property.create("personId", Integer.class);
    public static final Property<Integer> PROVIDER_ID = Property.create("providerId", Integer.class);
    public static final Property<BigDecimal> RANGE_HIGH = Property.create("rangeHigh", BigDecimal.class);
    public static final Property<BigDecimal> RANGE_LOW = Property.create("rangeLow", BigDecimal.class);
    public static final Property<Integer> UNIT_CONCEPT_ID = Property.create("unitConceptId", Integer.class);
    public static final Property<String> UNIT_SOURCE_VALUE = Property.create("unitSourceValue", String.class);
    public static final Property<Integer> VALUE_AS_CONCEPT_ID = Property.create("valueAsConceptId", Integer.class);
    public static final Property<BigDecimal> VALUE_AS_NUMBER = Property.create("valueAsNumber", BigDecimal.class);
    public static final Property<String> VALUE_SOURCE_VALUE = Property.create("valueSourceValue", String.class);
    public static final Property<Integer> VISIT_DETAIL_ID = Property.create("visitDetailId", Integer.class);
    public static final Property<Integer> VISIT_OCCURRENCE_ID = Property.create("visitOccurrenceId", Integer.class);
    public static final Property<Concept> CONCEPT = Property.create("concept", Concept.class);

    protected Long measurementConceptId;
    protected LocalDate measurementDate;
    protected LocalDateTime measurementDatetime;
    protected Long measurementId;
    protected Integer measurementSourceConceptId;
    protected String measurementSourceValue;
    protected String measurementTime;
    protected int measurementTypeConceptId;
    protected Integer operatorConceptId;
    protected int personId;
    protected Integer providerId;
    protected BigDecimal rangeHigh;
    protected BigDecimal rangeLow;
    protected Integer unitConceptId;
    protected String unitSourceValue;
    protected Integer valueAsConceptId;
    protected BigDecimal valueAsNumber;
    protected String valueSourceValue;
    protected Integer visitDetailId;
    protected Integer visitOccurrenceId;

    protected Object concept;

    public void setMeasurementConceptId(Long measurementConceptId) {
        beforePropertyWrite("measurementConceptId", this.measurementConceptId, measurementConceptId);
        this.measurementConceptId = measurementConceptId;
    }

    public Long getMeasurementConceptId() {
        beforePropertyRead("measurementConceptId");
        return this.measurementConceptId;
    }

    public void setMeasurementDate(LocalDate measurementDate) {
        beforePropertyWrite("measurementDate", this.measurementDate, measurementDate);
        this.measurementDate = measurementDate;
    }

    public LocalDate getMeasurementDate() {
        beforePropertyRead("measurementDate");
        return this.measurementDate;
    }

    public void setMeasurementDatetime(LocalDateTime measurementDatetime) {
        beforePropertyWrite("measurementDatetime", this.measurementDatetime, measurementDatetime);
        this.measurementDatetime = measurementDatetime;
    }

    public LocalDateTime getMeasurementDatetime() {
        beforePropertyRead("measurementDatetime");
        return this.measurementDatetime;
    }

    public void setMeasurementId(Long measurementId) {
        beforePropertyWrite("measurementId", this.measurementId, measurementId);
        this.measurementId = measurementId;
    }

    public Long getMeasurementId() {
        beforePropertyRead("measurementId");
        return this.measurementId;
    }

    public void setMeasurementSourceConceptId(int measurementSourceConceptId) {
        beforePropertyWrite("measurementSourceConceptId", this.measurementSourceConceptId, measurementSourceConceptId);
        this.measurementSourceConceptId = measurementSourceConceptId;
    }

    public int getMeasurementSourceConceptId() {
        beforePropertyRead("measurementSourceConceptId");
        if(this.measurementSourceConceptId == null) {
            return 0;
        }
        return this.measurementSourceConceptId;
    }

    public void setMeasurementSourceValue(String measurementSourceValue) {
        beforePropertyWrite("measurementSourceValue", this.measurementSourceValue, measurementSourceValue);
        this.measurementSourceValue = measurementSourceValue;
    }

    public String getMeasurementSourceValue() {
        beforePropertyRead("measurementSourceValue");
        return this.measurementSourceValue;
    }

    public void setMeasurementTime(String measurementTime) {
        beforePropertyWrite("measurementTime", this.measurementTime, measurementTime);
        this.measurementTime = measurementTime;
    }

    public String getMeasurementTime() {
        beforePropertyRead("measurementTime");
        return this.measurementTime;
    }

    public void setMeasurementTypeConceptId(int measurementTypeConceptId) {
        beforePropertyWrite("measurementTypeConceptId", this.measurementTypeConceptId, measurementTypeConceptId);
        this.measurementTypeConceptId = measurementTypeConceptId;
    }

    public int getMeasurementTypeConceptId() {
        beforePropertyRead("measurementTypeConceptId");
        return this.measurementTypeConceptId;
    }

    public void setOperatorConceptId(int operatorConceptId) {
        beforePropertyWrite("operatorConceptId", this.operatorConceptId, operatorConceptId);
        this.operatorConceptId = operatorConceptId;
    }

    public int getOperatorConceptId() {
        beforePropertyRead("operatorConceptId");
        if(this.operatorConceptId == null) {
            return 0;
        }
        return this.operatorConceptId;
    }

    public void setPersonId(int personId) {
        beforePropertyWrite("personId", this.personId, personId);
        this.personId = personId;
    }

    public int getPersonId() {
        beforePropertyRead("personId");
        return this.personId;
    }

    public void setProviderId(int providerId) {
        beforePropertyWrite("providerId", this.providerId, providerId);
        this.providerId = providerId;
    }

    public int getProviderId() {
        beforePropertyRead("providerId");
        if(this.providerId == null) {
            return 0;
        }
        return this.providerId;
    }

    public void setRangeHigh(BigDecimal rangeHigh) {
        beforePropertyWrite("rangeHigh", this.rangeHigh, rangeHigh);
        this.rangeHigh = rangeHigh;
    }

    public BigDecimal getRangeHigh() {
        beforePropertyRead("rangeHigh");
        return this.rangeHigh;
    }

    public void setRangeLow(BigDecimal rangeLow) {
        beforePropertyWrite("rangeLow", this.rangeLow, rangeLow);
        this.rangeLow = rangeLow;
    }

    public BigDecimal getRangeLow() {
        beforePropertyRead("rangeLow");
        return this.rangeLow;
    }

    public void setUnitConceptId(int unitConceptId) {
        beforePropertyWrite("unitConceptId", this.unitConceptId, unitConceptId);
        this.unitConceptId = unitConceptId;
    }

    public int getUnitConceptId() {
        beforePropertyRead("unitConceptId");
        if(this.unitConceptId == null) {
            return 0;
        }
        return this.unitConceptId;
    }

    public void setUnitSourceValue(String unitSourceValue) {
        beforePropertyWrite("unitSourceValue", this.unitSourceValue, unitSourceValue);
        this.unitSourceValue = unitSourceValue;
    }

    public String getUnitSourceValue() {
        beforePropertyRead("unitSourceValue");
        return this.unitSourceValue;
    }

    public void setValueAsConceptId(int valueAsConceptId) {
        beforePropertyWrite("valueAsConceptId", this.valueAsConceptId, valueAsConceptId);
        this.valueAsConceptId = valueAsConceptId;
    }

    public int getValueAsConceptId() {
        beforePropertyRead("valueAsConceptId");
        if(this.valueAsConceptId == null) {
            return 0;
        }
        return this.valueAsConceptId;
    }

    public void setValueAsNumber(BigDecimal valueAsNumber) {
        beforePropertyWrite("valueAsNumber", this.valueAsNumber, valueAsNumber);
        this.valueAsNumber = valueAsNumber;
    }

    public BigDecimal getValueAsNumber() {
        beforePropertyRead("valueAsNumber");
        return this.valueAsNumber;
    }

    public void setValueSourceValue(String valueSourceValue) {
        beforePropertyWrite("valueSourceValue", this.valueSourceValue, valueSourceValue);
        this.valueSourceValue = valueSourceValue;
    }

    public String getValueSourceValue() {
        beforePropertyRead("valueSourceValue");
        return this.valueSourceValue;
    }

    public void setVisitDetailId(int visitDetailId) {
        beforePropertyWrite("visitDetailId", this.visitDetailId, visitDetailId);
        this.visitDetailId = visitDetailId;
    }

    public int getVisitDetailId() {
        beforePropertyRead("visitDetailId");
        if(this.visitDetailId == null) {
            return 0;
        }
        return this.visitDetailId;
    }

    public void setVisitOccurrenceId(int visitOccurrenceId) {
        beforePropertyWrite("visitOccurrenceId", this.visitOccurrenceId, visitOccurrenceId);
        this.visitOccurrenceId = visitOccurrenceId;
    }

    public int getVisitOccurrenceId() {
        beforePropertyRead("visitOccurrenceId");
        if(this.visitOccurrenceId == null) {
            return 0;
        }
        return this.visitOccurrenceId;
    }

    public void setConcept(Concept concept) {
        setToOneTarget("concept", concept, true);
    }

    public Concept getConcept() {
        return (Concept)readProperty("concept");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "measurementConceptId":
                return this.measurementConceptId;
            case "measurementDate":
                return this.measurementDate;
            case "measurementDatetime":
                return this.measurementDatetime;
            case "measurementId":
                return this.measurementId;
            case "measurementSourceConceptId":
                return this.measurementSourceConceptId;
            case "measurementSourceValue":
                return this.measurementSourceValue;
            case "measurementTime":
                return this.measurementTime;
            case "measurementTypeConceptId":
                return this.measurementTypeConceptId;
            case "operatorConceptId":
                return this.operatorConceptId;
            case "personId":
                return this.personId;
            case "providerId":
                return this.providerId;
            case "rangeHigh":
                return this.rangeHigh;
            case "rangeLow":
                return this.rangeLow;
            case "unitConceptId":
                return this.unitConceptId;
            case "unitSourceValue":
                return this.unitSourceValue;
            case "valueAsConceptId":
                return this.valueAsConceptId;
            case "valueAsNumber":
                return this.valueAsNumber;
            case "valueSourceValue":
                return this.valueSourceValue;
            case "visitDetailId":
                return this.visitDetailId;
            case "visitOccurrenceId":
                return this.visitOccurrenceId;
            case "concept":
                return this.concept;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "measurementConceptId":
                this.measurementConceptId = (Long)val;
                break;
            case "measurementDate":
                this.measurementDate = (LocalDate)val;
                break;
            case "measurementDatetime":
                this.measurementDatetime = (LocalDateTime)val;
                break;
            case "measurementId":
                this.measurementId = (Long)val;
                break;
            case "measurementSourceConceptId":
                this.measurementSourceConceptId = (Integer)val;
                break;
            case "measurementSourceValue":
                this.measurementSourceValue = (String)val;
                break;
            case "measurementTime":
                this.measurementTime = (String)val;
                break;
            case "measurementTypeConceptId":
                this.measurementTypeConceptId = val == null ? 0 : (int)val;
                break;
            case "operatorConceptId":
                this.operatorConceptId = (Integer)val;
                break;
            case "personId":
                this.personId = val == null ? 0 : (int)val;
                break;
            case "providerId":
                this.providerId = (Integer)val;
                break;
            case "rangeHigh":
                this.rangeHigh = (BigDecimal)val;
                break;
            case "rangeLow":
                this.rangeLow = (BigDecimal)val;
                break;
            case "unitConceptId":
                this.unitConceptId = (Integer)val;
                break;
            case "unitSourceValue":
                this.unitSourceValue = (String)val;
                break;
            case "valueAsConceptId":
                this.valueAsConceptId = (Integer)val;
                break;
            case "valueAsNumber":
                this.valueAsNumber = (BigDecimal)val;
                break;
            case "valueSourceValue":
                this.valueSourceValue = (String)val;
                break;
            case "visitDetailId":
                this.visitDetailId = (Integer)val;
                break;
            case "visitOccurrenceId":
                this.visitOccurrenceId = (Integer)val;
                break;
            case "concept":
                this.concept = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.measurementConceptId);
        out.writeObject(this.measurementDate);
        out.writeObject(this.measurementDatetime);
        out.writeObject(this.measurementId);
        out.writeObject(this.measurementSourceConceptId);
        out.writeObject(this.measurementSourceValue);
        out.writeObject(this.measurementTime);
        out.writeInt(this.measurementTypeConceptId);
        out.writeObject(this.operatorConceptId);
        out.writeInt(this.personId);
        out.writeObject(this.providerId);
        out.writeObject(this.rangeHigh);
        out.writeObject(this.rangeLow);
        out.writeObject(this.unitConceptId);
        out.writeObject(this.unitSourceValue);
        out.writeObject(this.valueAsConceptId);
        out.writeObject(this.valueAsNumber);
        out.writeObject(this.valueSourceValue);
        out.writeObject(this.visitDetailId);
        out.writeObject(this.visitOccurrenceId);
        out.writeObject(this.concept);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.measurementConceptId = (Long)in.readObject();
        this.measurementDate = (LocalDate)in.readObject();
        this.measurementDatetime = (LocalDateTime)in.readObject();
        this.measurementId = (Long)in.readObject();
        this.measurementSourceConceptId = (Integer)in.readObject();
        this.measurementSourceValue = (String)in.readObject();
        this.measurementTime = (String)in.readObject();
        this.measurementTypeConceptId = in.readInt();
        this.operatorConceptId = (Integer)in.readObject();
        this.personId = in.readInt();
        this.providerId = (Integer)in.readObject();
        this.rangeHigh = (BigDecimal)in.readObject();
        this.rangeLow = (BigDecimal)in.readObject();
        this.unitConceptId = (Integer)in.readObject();
        this.unitSourceValue = (String)in.readObject();
        this.valueAsConceptId = (Integer)in.readObject();
        this.valueAsNumber = (BigDecimal)in.readObject();
        this.valueSourceValue = (String)in.readObject();
        this.visitDetailId = (Integer)in.readObject();
        this.visitOccurrenceId = (Integer)in.readObject();
        this.concept = in.readObject();
    }

}
